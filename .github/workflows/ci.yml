name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  # For coverage reporting
  pull-requests: write

concurrency:
  group: "ci-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        deno-version: [2.4.2]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ matrix.deno-version }}
          cache: true

      - name: Configure Git (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          git config --system core.autocrlf false
          git config --system core.eol lf

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: "release"

      - name: Install R packages
        run: |
          Rscript -e "install.packages(c('jsonlite', 'nortest', 'moments', 'fBasics'), repos='https://cran.r-project.org/')"

      - name: Create output directories
        run: |
          mkdir -p examples/dataframe/output

      - name: Check formatting
        run: deno fmt --check

      - name: Lint code
        run: deno lint

      - name: Run tests with coverage
        run: deno test -A --coverage=cov_profile --parallel src/dataframe examples/dataframe tests/glm tests/statistical_tests

      - name: Generate coverage report
        if: matrix.os == 'ubuntu-latest'
        run: deno coverage cov_profile

      - name: Generate LCOV coverage report
        if: matrix.os == 'ubuntu-latest'
        run: deno coverage --lcov cov_profile --output=cov.lcov

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          file: ./cov.lcov
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Optional: Test with canary Deno to catch breaking changes early
  test-canary:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Deno (Canary)
        uses: denoland/setup-deno@v2
        with:
          deno-version: canary
          cache: true

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: "release"

      - name: Install R packages
        run: |
          Rscript -e "install.packages(c('jsonlite', 'nortest', 'moments', 'fBasics'), repos='https://cran.r-project.org/')"

      - name: Create output directories
        run: |
          mkdir -p examples/dataframe/output

      - name: Run tests with canary
        run: deno test -A --parallel src/dataframe examples/dataframe tests/glm tests/statistical_tests

  # Build and test the JSR package
  build-jsr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: 2.4.2
          cache: true

      - name: Check JSR package
        run: deno check src/dataframe/mod.ts

      - name: Test JSR package
        run: deno test -A --parallel src/dataframe examples/dataframe tests/glm tests/statistical_tests
